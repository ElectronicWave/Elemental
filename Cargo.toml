[package]
name = "elemental"
version = "0.1.0"
edition = "2024"

[dependencies]
futures = "0.3.31"
goblin = "0.9.3"
log = { version = "0.4.27", features = ["kv_std"] }
reqwest = { version = "0.12.15", features = ["json"] }
sha1_smol = "1.0.1"
serde_json = "1.0.140"
serde = { version = "1.0.219", features = ["derive"] }
tokio = { version = "1.45.0", features = ["rt", "macros", "fs", "rt-multi-thread"] }
tokio-util = "0.7.15"
toml = "0.8.22"
zip = { version = "4.0.0", default-features = false, features = ["deflate"] }

[target.'cfg(windows)'.dependencies]
windows-sys = "0.59.0"
winreg = "0.55.0"

[lib]
crate-type = ["cdylib"]

[[bin]]
name = "cli"
path = "src/main.rs"

# https://github.com/microsoft/edit/blob/main/Cargo.toml
# We use `opt-level = "s"` as it significantly reduces binary size.
# We could then use the `#[optimize(speed)]` attribute for spot optimizations.
# Unfortunately, that attribute currently doesn't work on intrinsics such as memset.
[profile.release]
codegen-units = 1           # reduces binary size by ~2%
debug = "full"              # No one needs an undebuggable release binary
lto = true                  # reduces binary size by ~14%
opt-level = "s"             # reduces binary size by ~25%
panic = "abort"             # reduces binary size by ~50% in combination with -Zbuild-std-features=panic_immediate_abort
split-debuginfo = "packed"  # generates a separate *.dwp/*.dSYM so the binary can get stripped
strip = "symbols"           # See split-debuginfo - allows us to drop the size by ~65%
incremental = true          # Improves re-compile times

[profile.bench]
codegen-units = 16          # Make compiling criterion faster (16 is the default, but profile.release sets it to 1)
lto = "thin"                # Similarly, speed up linking by a ton